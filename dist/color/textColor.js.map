{"version":3,"file":"textColor.js","sourceRoot":"","sources":["../../src/color/textColor.ts"],"names":[],"mappings":"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","sourcesContent":["import { isUndefined } from \"@mjt-engine/object\";\nimport { builder } from \"./builder\";\nimport { ColorBuilder } from \"./ColorTypes\";\nimport { Luts } from \"./Luts\";\nimport { Colors } from \"./Colors\";\n\nexport function textColor(colors: string[], threshold: number = 4.5): string {\n  const textColors = colors.map((color) =>\n    _subtleTextColorContrast({ color, threshold })\n  );\n  const sorted = textColors\n    .sort((a, b) => {\n      const [aColor, aContrast] = a;\n      const [bColor, bContrast] = b;\n      if (aContrast === bContrast) {\n        return 0;\n      }\n      return aContrast > bContrast ? 1 : -1;\n    })\n    .map((colorContrast) => colorContrast[0]);\n  return sorted[0]?.toString();\n}\n\nexport function _subtleTextColorContrast({\n  color,\n  threshold = 4.5,\n  steps = 12,\n}: {\n  color: string;\n  threshold: number;\n  steps?: number;\n}): [ColorBuilder, number] {\n  const BW_LUT = Luts.create([\"black\", \"white\"]);\n  const WB_LUT = Luts.create([\"white\", \"black\"]);\n  const backgroundColor = builder({ color });\n  let bestBlack = Colors.from(\"black\");\n  let bestBlackContrast = 1000;\n  for (let i = 0; i < steps; i++) {\n    const stepedColor = builder({\n      color: BW_LUT.color((i / steps) * 0.5),\n    });\n    const contrast = stepedColor.contrast(backgroundColor);\n    if (contrast > threshold && contrast < bestBlackContrast) {\n      bestBlack = stepedColor;\n      bestBlackContrast = contrast;\n    }\n  }\n\n  let bestWhite = Colors.from(\"white\");\n  let bestWhiteContrast = 1000;\n  for (let i = 0; i < steps; i++) {\n    const stepedColor = builder({\n      color: WB_LUT.color((i / steps) * 0.5),\n    });\n\n    const contrast = stepedColor.contrast(backgroundColor);\n    if (contrast > threshold && contrast < bestWhiteContrast) {\n      bestWhite = stepedColor;\n      bestWhiteContrast = contrast;\n    }\n  }\n\n  if (bestWhiteContrast < bestBlackContrast) {\n    return [bestWhite, bestWhiteContrast];\n  }\n  return [bestBlack, bestBlackContrast];\n}\n"]}