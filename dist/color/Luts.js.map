{"version":3,"file":"Luts.js","sourceRoot":"","sources":["../../src/color/Luts.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,OAAO,EAAE,MAAM,WAAW,CAAC;AACpC,OAAO,EAAE,KAAK,EAAE,MAAM,SAAS,CAAC;AAEhC,OAAO,EAAE,SAAS,EAAE,MAAM,aAAa,CAAC;AAExC,MAAM,UAAU,KAAK,CAAC,KAAc;IAClC,OAAO,CACL,KAAK,KAAK,IAAI;QACd,OAAO,KAAK,KAAK,QAAQ;QACzB,OAAO,IAAI,KAAK;QAChB,OAAO,KAAK,CAAC,OAAO,CAAC,KAAK,UAAU;QACpC,MAAM,IAAI,KAAK;QACf,OAAO,KAAK,CAAC,MAAM,CAAC,KAAK,UAAU,CACpC,CAAC;AACJ,CAAC;AASD,SAAS,YAAY,CACnB,MAAsB,EACtB,QAAgB,CAAC;IAEjB,IAAI,KAAK,IAAI,CAAC,EAAE,CAAC;QACf,OAAO,MAAM,CAAC;IAChB,CAAC;IACD,MAAM,QAAQ,GAAG,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE;QAC9C,IAAI,GAAG,KAAK,GAAG,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;YAC3B,OAAO,CAAC,CAAC,CAAC,CAAC;QACb,CAAC;QACD,MAAM,IAAI,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC;QAC1B,OAAO,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC;IAC1B,CAAC,CAAC,CAAC;IACH,OAAO,YAAY,CAAC,QAAQ,EAAE,KAAK,GAAG,CAAC,CAAC,CAAC;AAC3C,CAAC;AAED,SAAS,MAAM,CAAC,MAAyB,EAAE,SAAiB,CAAC;IAC3D,IAAI,KAAK,CAAC,MAAM,CAAC,EAAE,CAAC;QAClB,OAAO,MAAM,CAAC;IAChB,CAAC;IACD,MAAM,cAAc,GAAG,YAAY,CACjC,MAAM,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,OAAO,CAAC,EAAE,KAAK,EAAE,CAAC,CAAC,EACzC,MAAM,CACP,CAAC;IACF,wBAAwB;IACxB,MAAM,GAAG,GAAQ;QACf,GAAG,EAAE,CAAC,SAAS,EAAE,EAAE;YACjB,OAAO,GAAG,CAAC,KAAK,CAAC,SAAS,GAAG,EAAE,CAAC,CAAC;QACnC,CAAC;QACD,IAAI,EAAE,CAAC,SAAS,EAAE,EAAE;YAClB,OAAO,GAAG,CAAC,IAAI,CAAC,SAAS,GAAG,EAAE,CAAC,CAAC;QAClC,CAAC;QACD,KAAK,EAAE,CAAC,KAAa,EAAE,EAAE;YACvB,KAAK,GAAG,KAAK,CAAC,KAAK,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;YAC3B,MAAM,GAAG,GAAG,KAAK,CACf,IAAI,CAAC,KAAK,CAAC,KAAK,GAAG,cAAc,CAAC,MAAM,CAAC,EACzC,CAAC,EACD,cAAc,CAAC,MAAM,GAAG,CAAC,CAC1B,CAAC;YACF,OAAO,cAAc,CAAC,GAAG,CAAC,CAAC,QAAQ,EAAE,CAAC;QACxC,CAAC;QACD,IAAI,EAAE,CAAC,KAAa,EAAE,EAAE;YACtB,MAAM,KAAK,GAAG,GAAG,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;YAC/B,OAAO,SAAS,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;QAC5B,CAAC;KACF,CAAC;IACF,OAAO,GAAG,CAAC;AACb,CAAC;AAED,MAAM,CAAC,MAAM,IAAI,GAAG;IAClB,MAAM;IACN,YAAY;CACb,CAAC","sourcesContent":["import { builder } from \"./builder\";\nimport { clamp } from \"./clamp\";\nimport { ColorBuilder, ColorLike } from \"./ColorTypes\";\nimport { textColor } from \"./textColor\";\n\nexport function isLut(maybe: unknown): maybe is Lut {\n  return (\n    maybe !== null &&\n    typeof maybe === \"object\" &&\n    \"color\" in maybe &&\n    typeof maybe[\"color\"] === \"function\" &&\n    \"text\" in maybe &&\n    typeof maybe[\"text\"] === \"function\"\n  );\n}\n\nexport type Lut = {\n  s12: (numerator: number) => string;\n  s12t: (numerator: number, beta?: number) => string;\n  color: (alpha: number) => string;\n  text: (alpha: number) => string;\n};\n\nfunction expandColors(\n  colors: ColorBuilder[],\n  level: number = 0\n): ColorBuilder[] {\n  if (level <= 0) {\n    return colors;\n  }\n  const expanded = colors.flatMap((c, idx, arr) => {\n    if (idx === arr.length - 1) {\n      return [c];\n    }\n    const next = arr[idx + 1];\n    return [c, c.mix(next)];\n  });\n  return expandColors(expanded, level - 1);\n}\n\nfunction create(colors: ColorLike[] | Lut, levels: number = 8): Lut {\n  if (isLut(colors)) {\n    return colors;\n  }\n  const expandedColors = expandColors(\n    colors.map((color) => builder({ color })),\n    levels\n  );\n  // .map((c) => c.hex());\n  const lut: Lut = {\n    s12: (numerator) => {\n      return lut.color(numerator / 12);\n    },\n    s12t: (numerator) => {\n      return lut.text(numerator / 12);\n    },\n    color: (alpha: number) => {\n      alpha = clamp(alpha, 0, 1);\n      const idx = clamp(\n        Math.floor(alpha * expandedColors.length),\n        0,\n        expandedColors.length - 1\n      );\n      return expandedColors[idx].toString();\n    },\n    text: (alpha: number) => {\n      const color = lut.color(alpha);\n      return textColor([color]);\n    },\n  };\n  return lut;\n}\n\nexport const Luts = {\n  create,\n  expandColors,\n};\n"]}